
********************************why react developer have to do testing*************************** 
Testing React components is crucial for several reasons:
            // 1. Ensures Component Functionality
// Validation: Testing ensures that components behave as expected and produce the correct output given certain inputs or states.
// Bug Detection: It helps catch bugs early in the development process by verifying that the component works correctly under various scenarios.
            // 2. Improves Code Quality
// Design Improvement: Writing tests often leads to better component design. It encourages developers to create smaller, more manageable, and more modular components.
// Documentation: Tests serve as a form of documentation, describing how components should behave and how they are expected to be used.
         // 3. Enhances Collaboration
// Clear Expectations: Tests define clear expectations for component behavior, making it easier for team members to understand how a component should work.
// Integration Assurance: Testing helps ensure that different parts of the application work together correctly, which is especially important in large teams or complex projects.
         // 4. Supports Automated Testing and CI/CD
// Continuous Integration: Automated tests can be integrated into CI/CD pipelines to automatically run tests when changes are made, ensuring that new code does not break existing functionality.
// Efficiency: Automated tests speed up the development process by reducing the need for manual testing and allowing quick feedback.
        // 5. Improves User Experience
// Consistent Behavior: Testing helps ensure that the user interface behaves consistently and meets the user’s expectations, leading to a better user experience.
// Error Handling: Tests can verify that error handling is properly implemented, ensuring that users are presented with appropriate feedback in case of issues.


*********************************** Type of testing ***********************
//1.unit testing= testing individual units of Component
//2.Integrated-testing= testing between two units or component
//3.E-2-E Testing= test Start to end complete Project(usually this thing is done by tester not developer)

******************************Requirement**************************************
 //1.jest 
 //2.React Testing Library
  //note - if you are using  CRA(create react app (npx create-react-app demo)) their is no need to use any third party library everything you will get but if you are using vite ,parcels than you have to install manually for better understanding follow offical document

*****************************how to execute***************************
//go and check package.json (if you are following cra)
//command: npm run test 
//after press a
                                        //than you are getting this sort of message
                                        //Test Suites: 1 failed, 3 passed, 4 total
                                        //Tests:       7 passed, 7 total
                                        //Snapshots:   0 total
                                        //Time:        3.27 s


*****************write first js test case************************** 
// follow -2.function (folder)

************************ understand matcher fuction or method************************
//follow this link -   https://jestjs.io/docs/using-matchers
                                       

//****************what is  diff. blw describe and test or it************************/
//In Jest, describe and test (or it) are both used to structure and organize your test cases, but they serve different purposes and have different roles:                                                        //describe
//Purpose: describe is used to group related tests together. This helps in organizing tests into logical units and makes test output more readable.
//Usage: You wrap multiple test or it blocks inside a describe block. It's commonly used for grouping tests that share a common setup or that pertain to the same feature or module.
//Syntax:
// describe('Group of related tests', () => {
//   test('test case 1', () => {
//     // Test implementation
//   });

//   test('test case 2', () => {
//     // Test implementation
//   });
// });
                                                //  test (or it)
//Purpose: test (or it, which is an alias for test) is used to define a single test case. It describes a specific behavior or functionality that you want to verify.
//Usage: You write individual assertions inside a test block. Each test block should be focused on a single aspect or unit of your code.
//Syntax:
 
// test('should do something', () => {
//   // Test implementation
// });


                                                //  Differences
// Functionality: describe is for grouping and organizing, while test is for specifying individual test cases.
// Nesting: You can nest describe blocks inside other describe blocks to create a hierarchy of tests. test blocks can be inside describe blocks to group related test cases together.
// Example
//Here's an example showing how describe and test can be used together:

 
// describe('Array operations', () => {
//   describe('push method', () => {
//     test('should add an element to the end of the array', () => {
//       const arr = [];
//       arr.push(1);
//       expect(arr).toEqual([1]);
//     });

//     test('should update the length of the array', () => {
//       const arr = [1];
//       arr.push(2);
//       expect(arr.length).toBe(2);
//     });
//   });

//   describe('pop method', () => {
//     test('should remove the last element from the array', () => {
//       const arr = [1, 2];
//       arr.pop();
//       expect(arr).toEqual([1]);
//     });

//     test('should decrease the length of the array', () => {
//       const arr = [1, 2];
//       arr.pop();
//       expect(arr.length).toBe(1);
//     });
//   });
// });

//************************************Mocking function or jest.fn()******************************************/
//In Jest, jest.fn() is a utility function used to create mock functions. Mock functions (or spies) are essential in unit testing because they allow you to monitor and control the behavior of functions, track how they are called, and verify that they are used as expected.

//Here’s a detailed explanation of jest.fn() and its common use cases:

           //1.Creating a Mock Function

// code:-
//const mockFunction = jest.fn();
//Purpose: Creates a new, unused mock function.
//Behavior: By default, a mock function does nothing and returns undefined.


            //2. Tracking Calls and Arguments
//Mock functions provide utilities to track how they are called, including:-

//Number of Calls: mockFunction.mock.calls.length

//Arguments for Each Call: mockFunction.mock.calls

//Return Values: mockFunction.mock.results

// code:-
// const mockFunction = jest.fn();
// mockFunction('arg1', 'arg2');
// mockFunction('arg3');
// console.log(mockFunction.mock.calls);
// // Outputs: [ ['arg1', 'arg2'], ['arg3'] ]
// Explanation:
// mock.calls contains an array of arrays, each representing the arguments used in each call to the mock function.


            //3.Setting Return Values
// You can configure a mock function to return specific values using mockReturnValue() or mockReturnValueOnce().
// code:-
// const mockFunction = jest.fn().mockReturnValue('default value');
// console.log(mockFunction()); // Outputs: 'default value'
// // Setting a different return value for the first call
// mockFunction.mockReturnValueOnce('first call');
// console.log(mockFunction()); // Outputs: 'first call'
// console.log(mockFunction()); // Outputs: 'default value'
// Explanation:
// mockReturnValue() sets a default return value for all calls.
// mockReturnValueOnce() sets a return value for only the next call.


                       //4.Setting Implementation
// You can provide a custom implementation for the mock function using mockImplementation().
//  code:-
// const mockFunction = jest.fn((a, b) => a + b);
// console.log(mockFunction(2, 3)); // Outputs: 5
// Explanation:
// mockImplementation() allows you to define a custom implementation for the mock function.


                          //5.Resetting Mock Function
// Sometimes you might want to clear the state of a mock function between tests using mockReset() or mockClear().
// code:-
// const mockFunction = jest.fn();
// mockFunction('test');
// console.log(mockFunction.mock.calls.length); // Outputs: 1
// mockFunction.mockReset(); // Clears all calls and implementations
// console.log(mockFunction.mock.calls.length); // Outputs: 0
// Explanation:
// mockReset() clears all mock calls, return values, and implementations.
// mockClear() only clears call history, preserving return values and implementations.


                         //6.Verifying Behavior
//Jest provides matchers for asserting how a mock function was used:
// code:-
// const mockFunction = jest.fn();
// mockFunction('arg1', 'arg2');
// expect(mockFunction).toHaveBeenCalled(); // Asserts that the function was called
// expect(mockFunction).toHaveBeenCalledWith('arg1', 'arg2'); // Asserts the function was called with specific arguments
// expect(mockFunction).toHaveBeenCalledTimes(1); // Asserts the function was called exactly once
// Explanation:
// toHaveBeenCalled(): Checks if the function was called at least once.
// toHaveBeenCalledWith(): Checks if the function was called with specific arguments.
// toHaveBeenCalledTimes(): Checks the exact number of times the function was called.


                      //7.Examples in Context
// Testing a Function that Uses a Callback
// code:-
// // myModule.js
// function processData(callback) {
//   callback('data');
// }
// module.exports = processData;
// // myModule.test.js
// const processData = require('./myModule');

// test('calls callback with data', () => {
//   const mockCallback = jest.fn();

//   processData(mockCallback);

//   expect(mockCallback).toHaveBeenCalledWith('data');
// });
// Explanation:
// jest.fn() is used to create a mock callback function.
// The test verifies that the processData function calls the mock callback with the expected argument.

                     //8.Testing Asynchronous Code 
// code:-
// // asyncModule.js
// function fetchData(callback) {
//   setTimeout(() => {
//     callback('data');
//   }, 1000);
// }

// module.exports = fetchData;

// // asyncModule.test.js
// const fetchData = require('./asyncModule');
// test('calls callback with data after async operation', done => {
//   const mockCallback = jest.fn();
//   fetchData(mockCallback);
//   setTimeout(() => {
//     expect(mockCallback).toHaveBeenCalledWith('data');
//     done(); // Indicates test completion
//   }, 1500); // Ensure timeout is longer than async delay
// });



//*********************************resolves and rejects****************************************
 //.resolves 
-You can also use the .resolves matcher in your expect statement, and Jest will wait for that promise to resolve. If the promise is rejected, the test will automatically fail.

example:-
test('the data is peanut butter', () => {
  return expect(fetchData()).resolves.toBe('peanut butter');
});

Note Point-
Be sure to return the assertion—if you omit this return statement, your test will complete before the promise returned from fetchData is resolved and then() has a chance to execute the callback.

/// .rejects
If you expect a promise to be rejected, use the .rejects matcher. It works analogically to the .resolves matcher. If the promise is fulfilled, the test will automatically fail.
 example:-
test('the fetch fails with an error', () => {
  return expect(fetchData()).rejects.toMatch('error');
});
 
